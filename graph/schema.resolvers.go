package graph
				// This file will be automatically regenerated based on the schema, any resolver implementations
				// will be copied through when generating and any unknown code will be moved to the end.
				// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
"context"
"fmt"
"test/graph/model"
"github.com/mackerelio/go-osstat/network")



type Stats struct {
	Name             string
	RxBytes, TxBytes uint64
}

// func getIface() *model.NetIFMetrics {

//     iface := &model.NetIFMetrics{
//         Name:  netIO.IntName,
//         TxSec: fmt.Sprintf("%.2f", float64(netIO.TX)/1024),
//         RxSec: fmt.Sprintf("%.2f", float64(netIO.RX)/1024),
//         Tx:    fmt.Sprintf("%d", netIO.TX),
//         Rx:    fmt.Sprintf("%d", netIO.RX),
//     }

//     return iface
// }

// NetIFMetrics is the resolver for the NetIFMetrics field.
func (r *queryResolver) NetIFMetrics(ctx context.Context) ([]*model.NetIFMetrics, error) {

	var netIFMetrics []*model.NetIFMetrics

	stat, err := network.Get()
	if err != nil{
        fmt.Println("error network.Get ", err)
	}


	for _, s := range stat {
		netIFMetrics = append(netIFMetrics, &model.NetIFMetrics{
			Ifname: s.Name,
			RxBytes: s.RxBytes,
			TxBytes: s.TxBytes,
			RxBytesPSec: s.RxBytes,
			TxBytesPSec: s.TxBytes,
		})
	}

	return netIFMetrics, nil
}
// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }
type queryResolver struct{ *Resolver }
